* Ch1 - Building Abstractions with Procedures
** Interpretor Evaluation of Combinations
   1. Evaluate the subexpressions of the combination
   2. Apply the procedure that is the value of the leftmost subexpression (the operator)
       to the arguments that are the values of the other subexpressions (the operands)
** Substitution Model
    A model to determine the "meaning" of procedure application.

    To apply a compound procedure to arguments, evaluate the
    body of the procedure with each formal parameter replaced
    by the corresponding argument.

    For procedure applications that can be modeled using substitution and that yield
    legitimate vlaues, normal-order and applicative order evaluation produce
    the same value.

*** Normal-order evaluation
    Fully expand operand expressions for parameters until an expression of only
    primitive opperators then reduce for evaluation.
    "Fully expand and then reduce"

*** Applicative-order evaluation
    Method the interpreter actually uses.
    "Evaluate the arguments and then apply"


    
      
    
   
   
    
** Procedures as Black-Box Abstraction
   - procedural abtraction :: 
        An abstration of a procedure (i.e square function). At this level
        of abstraction, any procedure that computes the square is
        equally good
   - bound variable :: the name of the formal parameter of a procedure 
                       doesn't matter (i.e local scope). We say the 
                       procedure definition 'binds' its formal 
                       parameters.
                       Caveat: 
                       The meaning of a procedure definition
                       is unchanged if a bound variable is consistently 
                       renamed throughout the definition.
   - free variable :: an unbound variable.
   - scope :: The set of expressions for which a binding defines a name
              is called the scope of that name. In a procedure definition,
              the bound variable declared as the formal parameters of 
              the procedure have the body of the procedure as their scope.
   
   We can have nested 'define' in a procedure to make those internal
   definitions be scoped local to the outer procedure.

   - block structure :: nesting of definitions
   - lexical scoping :: dictates that free variables in a procedure are
        taken to refer to the bindings made by enclosing procedure
        definitions; that is, they are looked up in the environment
        in which the procedure was defined.

   *note* embdedded definitions must come first in a procedure body

** Procedures and the Processes They Generate
   - Procedure :: is a pattern for the /local evolution/ of a computational
                  process. It specifies how each stage of a process is built
                  upon the previous stage. We would like to make statements
                  about the overall, or /global/ behavior of a process whose
                  local evolution has been specified by a procedure.
*** Linear Recursion and Iteration
    - recursive process :: The type of process, charaterized by a chain of
         deferred operations.
    - linear recursive process :: When the amount of information needed to 
         keep track of the chain of deferred operations grows linearly with n
         ( i.e is proportional to n )
    - iterative process :: is one whose state can be summarized by a fixed
         number of state variables, together with a fixed rule that describes
         how the state variables should be updated as the process moves from
         state to state and an (optional) end test that specifies conditions
         under which the process should terminate.
    - linear iterative process :: when the number of steps grow linearly with n

    *note* 
    be careful not to confuse the notion of a recursive /process/ with 
    the notion of recursive /procedure/. A recursive procedure is referring
    to the syntactic fact that the procedure definition refers to the procedure
    itself. When we describe a process as following a pattern that is, say, 
    linearly recursive, we speak about how to process /evolves/ and not the syntax.

    *caveat* Most implementations of common languages ( including Ada, Pascal, C )
    are designed in such a way that the interpretation of any recursive
    procedure consumes an amount of memory that grows with the number or procedure
    calls, even when the process described is, in principle, iterative. As a 
    consequence ( without implmenting tail-recursion ) these languages can 
    describe iterative processes only by resorting to "special looping constructs",
    namely /do/, /for/, /while/.
    
*** Tree recursion
    i.e Computing the fibonacci numbers 
    Example: Counting Change
    - How many number of ways to change amount a using n kinds of coins?
    -- The recurrence relation is as follows:
    --- The number of ways to make change a not using first kind of coins
    --- Plus the number of ways to make change using the first kind of coins

    
